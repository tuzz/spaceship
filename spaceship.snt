function main () {
  array7<array7<bool>> gen0;
  bool orthogonal;

  genN = gen0;
  4.times(function^ (i) {
    edgeClear!(genN);
    genN = nextGeneration(genN);
  });

  invariant gen0.translate(orthogonal) == genN;

  expose gen0, genN, orthogonal;
};

function nextGeneration (gen) {
  return gen.map(function^ (row, y) {
    return row.map(function^ (cell, x) {
      neighbours = gen.liveNeighbours(x, y);
      return neighbours == 3 || (cell && neighbours == 2);
    });
  });
};

function translate (gen, orthogonal) {
  return gen.map(function^ (row, y) {
    return row.map(function^ (cell, x) {
      deltaX = orthogonal ? 0 : 1;
      deltaY = 1;

      return live?(gen, x + deltaX, y + deltaY);
    });
  });
};

function liveNeighbours (gen, x, y) {
  count = 0;

  count += gen.live?(x - 1, y - 1) ? 1 : 0;
  count += gen.live?(x, y - 1)     ? 1 : 0;
  count += gen.live?(x + 1, y - 1) ? 1 : 0;
  count += gen.live?(x - 1, y)     ? 1 : 0;
  count += gen.live?(x + 1, y)     ? 1 : 0;
  count += gen.live?(x - 1, y + 1) ? 1 : 0;
  count += gen.live?(x, y + 1)     ? 1 : 0;
  count += gen.live?(x + 1, y + 1) ? 1 : 0;

  return count;
};

function live? (gen, x, y) {
  return gen.get(y).get(x);
};

function edgeClear! (gen) {
  7.times(function^ (i) {
    invariant !gen.first[i];
    invariant !gen[i].first;
  });
};

main();
